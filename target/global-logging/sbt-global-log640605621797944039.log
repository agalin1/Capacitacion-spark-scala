[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\jespitiaa\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\jespitiaa\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Oracle Corporation Java 1.8.0_291)
[debug]       Load.loadUnit: plugins took 75.077ms
[debug]       Load.loadUnit: defsScala took 0.3092ms
[debug] [Loading] Scanning directory C:\Users\jespitiaa\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\jespitiaa\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.3344 ms
[debug]           Load.resolveProject(global-plugins) took 38.2069ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\jespitiaa\.sbt\1.0\plugins, plugins: List(<none>))) took 76.2192ms
[debug] [Loading] Done in C:\Users\jespitiaa\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 91.5772ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2098ms
[debug]     Load.loadUnit(file:/C:/Users/jespitiaa/.sbt/1.0/plugins/, ...) took 172.9545ms
[debug]   Load.apply: load took 295.7857ms
[debug]   Load.apply: resolveProjects took 5.0327ms
[debug]   Load.apply: finalTransforms took 47.436ms
[debug]   Load.apply: config.delegates took 6.2192ms
[debug]   Load.apply: Def.make(settings)... took 623.8132ms
[debug]   Load.apply: structureIndex took 96.315ms
[debug]   Load.apply: mkStreams took 1.4055ms
[info] loading global plugins from C:\Users\jespitiaa\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2616.71ms
[debug]           Load.loadUnit: plugins took 23.9563ms
[debug]           Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory C:\Users\jespitiaa\Documents\Github\capacitacion-spark-scala\project
[debug]             Load.loadUnit: mkEval took 6.9565ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\jespitiaa\Documents\Github\capacitacion-spark-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9945 ms
[info] loading settings for project capacitacion-spark-scala-build from idea.sbt ...
[debug]               Load.resolveProject(capacitacion-spark-scala-build) took 2.5825ms
[debug]             Load.loadTransitive: finalizeProject(Project(id capacitacion-spark-scala-build, base: C:\Users\jespitiaa\Documents\Github\capacitacion-spark-scala\project, plugins: List(<none>))) took 5.1224ms
[debug] [Loading] Done in C:\Users\jespitiaa\Documents\Github\capacitacion-spark-scala\project, returning: (capacitacion-spark-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2345.4984ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.3599ms
[debug]         Load.loadUnit(file:/C:/Users/jespitiaa/Documents/Github/capacitacion-spark-scala/project/, ...) took 2374.7206ms
[debug]       Load.apply: load took 2376.063ms
[debug]       Load.apply: resolveProjects took 0.1014ms
[debug]       Load.apply: finalTransforms took 10.3699ms
[debug]       Load.apply: config.delegates took 0.3952ms
[debug]       Load.apply: Def.make(settings)... took 74.7763ms
[debug]       Load.apply: structureIndex took 31.8514ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\jespitiaa\Documents\Github\capacitacion-spark-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3733.5476ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\jespitiaa\Documents\Github\capacitacion-spark-scala
[debug]       Load.loadUnit: mkEval took 0.2723ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\jespitiaa\Documents\Github\capacitacion-spark-scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.0249 ms
[info] loading settings for project capacitacion-spark-scala from build.sbt ...
[debug]         Load.resolveProject(capacitacion-spark-scala) took 34.3094ms
[debug]       Load.loadTransitive: finalizeProject(Project(id capacitacion-spark-scala, base: C:\Users\jespitiaa\Documents\Github\capacitacion-spark-scala, plugins: List(<none>))) took 37.6423ms
[debug] [Loading] Done in C:\Users\jespitiaa\Documents\Github\capacitacion-spark-scala, returning: (capacitacion-spark-scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 1409.5016ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.1427ms
[debug]   Load.loadUnit(file:/C:/Users/jespitiaa/Documents/Github/capacitacion-spark-scala/, ...) took 5157.7855ms
[debug] Load.apply: load took 5159.4108ms
[debug] Load.apply: resolveProjects took 0.254ms
[debug] Load.apply: finalTransforms took 23.2921ms
[debug] Load.apply: config.delegates took 0.2983ms
[debug] Load.apply: Def.make(settings)... took 60.993ms
[debug] Load.apply: structureIndex took 26.4278ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to capacitacion-spark-scala (in build file:/C:/Users/jespitiaa/Documents/Github/capacitacion-spark-scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63465 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63465, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to capacitacion-spark-scala (in build file:/C:/Users/jespitiaa/Documents/Github/capacitacion-spark-scala/)
[debug] > Exec(idea-shell, None, None)
